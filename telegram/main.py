import telebot
import config
#import main
import read
from telebot import types

"""
# RUN
bot.polling(none_stop=True)

bot = telebot.TeleBot(config.TOKEN)

read_result_json = read.read_engene('diagram.docx')
result = []
last_request = ""

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id,
                     text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç ".format(
                         message.from_user), reply_markup=markup)


@bot.message_handler(content_types=['text'])
def func(message):
    no_answer = True
    if (message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"):
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ–µ—Ç.. –°–ø–∞—Å–∏–±–æ —á—Ç–æ —á–∏—Ç–∞–µ—à—å —Å—Ç–∞—Ç—å—é!)".format(message.from_user))
        no_answer = False
    if (message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        # –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω—É–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        main.result = read.search_engene("id0",main.read_result_json)     # result = list with dic records
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for x in range(len(main.result)):
            btn = types.KeyboardButton(main.result[x]["Name"])
            markup.add(btn)
        back_main = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(back_main)
        bot.send_message(message.chat.id, text="–ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞?", reply_markup=markup)
        no_answer = False
    if (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
        button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
        no_answer = False
    if (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥"):
        main.result = read.search_engene(read.search_prev_element(main.last_request, read_result_json), main.read_result_json)  # result = list with dic records
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for x in range(len(main.result)):
            btn = types.KeyboardButton(main.result[x]["Name"])
            markup.add(btn)
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥")
        markup.add(back)
        back_main = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(back_main)
        bot.send_message(message.chat.id, text="–ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞?", reply_markup=markup)
        main.result = read.search_engene(main.result[x]["id"], main.read_result_json)
        return
        no_answer = False
    if (main.result != []):
        for x in range(len(main.result)):
            if (main.result[x]["Name"] == message.text):
                main.last_request = main.result[x]["id"]             # saving id for step back
                main.result = read.search_engene(main.result[x]["id"], main.read_result_json)
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for x in range(len(main.result)):
                    btn = types.KeyboardButton(main.result[x]["Name"])
                    markup.add(btn)
                back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –ù–∞–∑–∞–¥")
                markup.add(back)
                back_main = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                markup.add(back_main)
                bot.send_message(message.chat.id, text="–ö–∞–∫–∞—è —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º–∞?", reply_markup=markup)
                no_answer = False
                break           # stop cycle when find target element - bacause we change main.result
    if (no_answer == True):
        # nothing simular
        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª.. /start")
"""

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from config import TOKEN

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

"""
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
"""
"""
@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–ø–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!")
"""
"""
@dp.message_handler()
async def echo_message(msg: types.Message):
    await bot.send_message(msg.from_user.id, msg.text)
"""

#*****************************
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

button_hi = KeyboardButton('–ü—Ä–∏–≤–µ—Ç! üëã')

greet_kb = ReplyKeyboardMarkup()
greet_kb.add(button_hi)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=greet_kb)

greet_kb2 = ReplyKeyboardMarkup(
    resize_keyboard=True,one_time_keyboard=False).add(button_hi)

@dp.message_handler(commands=['hi1'])
async def process_hi1_command(message: types.Message):
    await message.reply("–ü–µ—Ä–≤–æ–µ - –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=greet_kb2)

greet_kb2 = ReplyKeyboardMarkup(
    resize_keyboard=True, one_time_keyboard=True
).add(button_hi)

# bot.py
@dp.message_handler(commands=['hi2'])
async def process_hi2_command(message: types.Message):
    await message.reply("–í—Ç–æ—Ä–æ–µ - –ø—Ä—è—á–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è", reply_markup=greet_kb2)

button1 = KeyboardButton('1Ô∏è‚É£')
button2 = KeyboardButton('2Ô∏è‚É£')
button3 = KeyboardButton('3Ô∏è‚É£')

markup3 = ReplyKeyboardMarkup().add(
    button1).add(button2).add(button3)

markup4 = ReplyKeyboardMarkup().row(
    button1, button2, button3
)

markup5 = ReplyKeyboardMarkup().row(
    button1, button2, button3
).add(KeyboardButton('–°—Ä–µ–¥–Ω–∏–π —Ä—è–¥'))

button4 = KeyboardButton('4Ô∏è‚É£')
button5 = KeyboardButton('5Ô∏è‚É£')
button6 = KeyboardButton('6Ô∏è‚É£')
markup5.row(button4, button5)
markup5.insert(button6)

@dp.message_handler(commands=['hi3'])
async def process_hi3_command(message: types.Message):
    await message.reply("–¢—Ä–µ—Ç—å–µ - –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫", reply_markup=markup3)

@dp.message_handler(commands=['hi4'])
async def process_hi4_command(message: types.Message):
    await message.reply("–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ - —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥", reply_markup=markup4)

@dp.message_handler(commands=['hi5'])
async def process_hi5_command(message: types.Message):
    await message.reply("–ü—è—Ç–æ–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫", reply_markup=markup5)

markup_request = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True)
).add(
    KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True)
)

#bot.py
@dp.message_handler(commands=['hi6'])
async def process_hi6_command(message: types.Message):
    await message.reply("–®–µ—Å—Ç–æ–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n–≠—Ç–∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞", reply_markup=markup_request)

markup_big = ReplyKeyboardMarkup()

markup_big.add(
    button1, button2, button3, button4, button5, button6
)
markup_big.row(
    button1, button2, button3, button4, button5, button6
)

markup_big.row(button4, button2)
markup_big.add(button3, button2)
markup_big.insert(button1)
markup_big.insert(button6)
markup_big.insert(KeyboardButton('9Ô∏è‚É£'))

# bot.py
@dp.message_handler(commands=['hi7'])
async def process_hi7_command(message: types.Message):
    await message.reply("–°–µ–¥—å–º–æ–µ - –≤—Å–µ –º–µ—Ç–æ–¥—ã –≤–º–µ—Å—Ç–µ", reply_markup=markup_big)

@dp.message_handler(commands=['rm'])
async def process_rm_command(message: types.Message):
    await message.reply("–£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=ReplyKeyboardRemove())

inline_btn_1 = InlineKeyboardButton('–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!', callback_data='button1')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)

@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')

@dp.message_handler(commands=['1'])
async def process_command_1(message: types.Message):
    await message.reply("–ü–µ—Ä–≤–∞—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞", reply_markup=inline_kb1)


inline_kb_full = InlineKeyboardMarkup(row_width=2).add(inline_btn_1)
inline_kb_full.add(InlineKeyboardButton('–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞', callback_data='btn2'))
inline_btn_3 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 3', callback_data='btn3')
inline_btn_4 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 4', callback_data='btn4')
inline_btn_5 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 5', callback_data='btn5')
inline_kb_full.add(inline_btn_3, inline_btn_4, inline_btn_5)
inline_kb_full.row(inline_btn_3, inline_btn_4, inline_btn_5)
inline_kb_full.insert(InlineKeyboardButton("query=''", switch_inline_query=''))
inline_kb_full.insert(InlineKeyboardButton("query='qwerty'", switch_inline_query='qwerty'))
inline_kb_full.insert(InlineKeyboardButton("Inline –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ", switch_inline_query_current_chat='wasd'))
inline_kb_full.add(InlineKeyboardButton('–£—Ä–æ–∫–∏ aiogram', url='https://surik00.gitbooks.io/aiogram-lessons/content/'))

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 2:
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 5:
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')

@dp.message_handler(commands=['2'])
async def process_command_2(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", reply_markup=inline_kb_full)


help_message =  "–≠—Ç–æ —É—Ä–æ–∫ –ø–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º.\n"\
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"\
                "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ,\n"\
                " –®–∞–±–ª–æ–Ω—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä:,\n "\
                "/hi1 - –∞–≤—Ç–æ —Ä–∞–∑–º–µ—Ä,\n"\
                "/hi2 - —Å–∫—Ä—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è,\n"\
                "/hi3 - –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫, \n"\
                "/hi4 - –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥, \n"\
                "/hi5 - –±–æ–ª—å—à–µ —Ä—è–¥–æ–≤, \n"\
                "/hi6 - –∑–∞–ø—Ä–æ—Å –ª–æ–∫–∞—Ü–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞,\n"\
                "/hi7 - –≤—Å–µ –º–µ—Ç–æ–¥—ã\n"\
                "/rm - —É–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω—ã, \n"\
                "–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:, \n"\
                "/1 - –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞, \n"\
                "/2 - —Å—Ä–∞–∑—É –º–Ω–æ–≥–æ –∫–Ω–æ–ø–æ–∫"



@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply(help_message)



#******************************
if __name__ == '__main__':
    executor.start_polling(dp)
